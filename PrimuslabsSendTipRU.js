const { ethers } = require("ethers");
const fs = require("fs");
const path = require("path");
const readline = require("readline");

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ---
const RPC_URL = "https://testnet.dplabs-internal.com/";  // URL —Ç–µ—Å—Ç–Ω–µ—Ç-–Ω–æ–¥—ã
const SEND_ROUTER_ADDRESS = "0xD17512B7EC12880Bd94Eca9d774089fF89805F02";  // –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
const PRIMUSLABS_CONTRACT_ABI = [
  {
    type: "function",
    name: "tip",
    stateMutability: "payable",
    inputs: [
      {
        name: "token",
        type: "tuple",
        components: [
          { name: "tokenType", type: "uint32" },  // –¢–∏–ø —Ç–æ–∫–µ–Ω–∞ (0 - –Ω–∞—Ç–∏–≤–Ω—ã–π, 1 - ERC20)
          { name: "tokenAddress", type: "address" },  // –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ ERC20)
        ],
      },
      {
        name: "recipient",
        type: "tuple",
        components: [
          { name: "idSource", type: "string" },  // –ò—Å—Ç–æ—á–Ω–∏–∫ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
          { name: "id", type: "string" },  // ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Twitter username)
          { name: "amount", type: "uint256" },  // –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
          { name: "nftIds", type: "uint256[]" },  // ID NFT (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
        ],
      },
    ],
    outputs: [],
  },
];

// --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ ---
const wallets = fs.readFileSync(path.join(__dirname, "wallets.txt"), "utf-8")
  .split("\n")
  .map((line) => line.trim())
  .filter((line) => line.length > 0 && !line.startsWith("#"));  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

if (wallets.length === 0) {
  throw new Error("–í —Ñ–∞–π–ª–µ wallets.txt –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π!");
}
console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤: ${wallets.length}`);

// --- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ---
const rl = readline.createInterface({ input: process.stdin, output: process.stdout });

async function askQuestion(question, validator = () => true) {
  while (true) {
    const answer = await new Promise((resolve) => rl.question(question, resolve));
    if (validator(answer)) return answer;
    console.log("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
}

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö Twitter-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
function generateRandomTwitterUser() {
  const adjectives = ["happy", "crypto", "web3", "degen", "bullish", "bearish", "smart", "fast", "lucky"];
  const nouns = ["trader", "whale", "ape", "dev", "hodler", "builder", "gmi", "ngmi"];
  const numbers = Math.floor(Math.random() * 1000);
  return `${adjectives[Math.floor(Math.random() * adjectives.length)]}${nouns[Math.floor(Math.random() * nouns.length)]}${numbers}`;
}

// --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ ---
function loadRecipientsFromFile(filename) {
  try {
    const recipients = fs.readFileSync(path.join(__dirname, filename), "utf-8")
      .split("\n")
      .map((line) => line.trim().replace(/^@/, ""))  // –£–¥–∞–ª—è–µ–º @ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
      .filter((line) => line.length > 0);

    if (recipients.length === 0) {
      console.warn("‚ö†Ô∏è –§–∞–π–ª –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å yubileyorg");
      return ["yubileyorg"];
    }
    return recipients;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å yubileyorg");
    return ["yubileyorg"];
  }
}

// --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ---
const tipToken = {
  tokenType: 1,  // 0 = –Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω, 1 = ERC-20
  tokenAddress: ethers.ZeroAddress,  // –î–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ PHRS (–µ—Å–ª–∏ tokenType=1, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å ERC-20 —Ç–æ–∫–µ–Ω–∞)
};

const tipRecipientTemplate = {
  idSource: "x",  // –ò—Å—Ç–æ—á–Ω–∏–∫ ID (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
  nftIds: [],     // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ NFT ID (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
};

// --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ---
async function sendTipFromWallet(privateKey, txCount, amountWei, recipients) {
  const provider = new ethers.JsonRpcProvider(RPC_URL);
  const signer = new ethers.Wallet(privateKey, provider);
  const contract = new ethers.Contract(SEND_ROUTER_ADDRESS, PRIMUSLABS_CONTRACT_ABI, signer);

  for (let i = 0; i < txCount; i++) {
    try {
      const recipient = recipients[i % recipients.length];  // –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
      console.log(`\nüîπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${i + 1}/${txCount} –¥–ª—è ${recipient}...`);

      // –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞ —Å –∑–∞–ø–∞—Å–æ–º 20%
      const gasLimit = await contract.tip.estimateGas(
        tipToken,
        { ...tipRecipientTemplate, id: recipient, amount: amountWei },
        { value: amountWei }
      );

      console.log(`üîπ –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞: ${gasLimit.toString()} (—Å –∑–∞–ø–∞—Å–æ–º 20%)`);

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const tx = await contract.tip(
        tipToken,
        { ...tipRecipientTemplate, id: recipient, amount: amountWei },
        {
          value: amountWei,
          gasLimit: Math.floor(Number(gasLimit) * 1.2),
          maxFeePerGas: (await provider.getFeeData()).maxFeePerGas,
          maxPriorityFeePerGas: (await provider.getFeeData()).maxPriorityFeePerGas,
        }
      );

      console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å –∫–æ—à–µ–ª—å–∫–∞ ${signer.address}:
      - Hash: ${tx.hash}
      - –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${recipient}
      - –°—É–º–º–∞: ${ethers.formatEther(amountWei)} PHRS`);

      // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const receipt = await tx.wait();
      console.log(`üéâ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–ª–æ–∫–µ ${receipt.blockNumber}:
      üîó https://testnet.pharosscan.xyz/tx/${tx.hash}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${i + 1}/${txCount}:`, error.shortMessage || error.message);

      if (error.code === "INSUFFICIENT_FUNDS") {
        console.log("üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—à–µ–ª–µ–∫.");
        break;
      } else if (error.code === "NONCE_EXPIRED" || error.code === "REPLACEMENT_UNDERPRICED") {
        console.log("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å nonce –∏–ª–∏ –∫–æ–º–∏—Å—Å–∏–µ–π. –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É...");
        i--;  // –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await new Promise(resolve => setTimeout(resolve, 2000));  // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
      }
    }
  }
}

// --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async function main() {
  try {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ PHRS...");

    // 1. –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    const recipientSource = await askQuestion(
      "üì• –ò—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:\n1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ (recipients.txt)\n2. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Twitter \n–í—ã–±–µ—Ä–∏—Ç–µ (1/2): ",
      (input) => ["1", "2"].includes(input)
    );

    let recipients = [];
    if (recipientSource === "1") {
      recipients = loadRecipientsFromFile("recipients.txt");
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${recipients.length}\n–°–ø–∏—Å–æ–∫: ${recipients.join(", ")}`);
    } else {
      const count = parseInt(await askQuestion(
        "üé≤ –°–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å? (1-100): ",
        (input) => !isNaN(input) && input > 0 && input <= 100
      ));
      recipients = Array.from({ length: count }, generateRandomTwitterUser);
      console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${recipients.length}\n–°–ø–∏—Å–æ–∫: ${recipients.join(", ")}`);
    }

    // 2. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const txCount = parseInt(await askQuestion(
      "üì¶ –°–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞? (1-100): ",
      (input) => !isNaN(input) && input >= 1 && input <= 100
    ));

    const amountInput = await askQuestion(
      "üí∞ –°–∫–æ–ª—å–∫–æ PHRS –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.001): ",
      (input) => {
        if (input.trim() === "") return true;
        const normalizedInput = input.replace(",", ".");
        return !isNaN(normalizedInput) && parseFloat(normalizedInput) > 0;
      }
    );

    const amountPHRS = amountInput.trim() === ""
      ? 0.001
      : parseFloat(amountInput.replace(",", "."));

    const amountWei = ethers.parseEther(amountPHRS.toString());
    console.log(`üí∏ –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${amountPHRS} PHRS (${amountWei} wei) –≤ –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`);

    // 4. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    console.log("\nüî• –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...");
    for (const [index, privateKey] of wallets.entries()) {
      try {
        const wallet = new ethers.Wallet(privateKey, new ethers.JsonRpcProvider(RPC_URL));
        const balance = await wallet.provider.getBalance(wallet.address);

        console.log(`\nüìå –ö–æ—à–µ–ª–µ–∫ ${index + 1}/${wallets.length}:
        - –ê–¥—Ä–µ—Å: ${wallet.address}
        - –ë–∞–ª–∞–Ω—Å: ${ethers.formatEther(balance)} PHRS
        - –¢—Ä–µ–±—É–µ—Ç—Å—è: ${ethers.formatEther(amountWei * BigInt(txCount))} PHRS`);

        if (balance < amountWei * BigInt(txCount)) {
          console.log("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—à–µ–ª–µ–∫.");
          continue;
        }

        console.log("‚úàÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...");
        await sendTipFromWallet(privateKey, txCount, amountWei, recipients);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞ ${index + 1}:`, error.message);
      }
    }

    console.log("\nüéâ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!");
    rl.close();
  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    rl.close();
    process.exit(1);
  }
}

main().catch(console.error);